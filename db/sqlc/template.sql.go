// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: template.sql

package frog_blossom_db

import (
	"context"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO template (
    name
) VALUES (
    $1
) RETURNING id, name
`

func (q *Queries) CreateTemplate(ctx context.Context, name string) (Template, error) {
	row := q.db.QueryRowContext(ctx, createTemplate, name)
	var i Template
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteTemplate = `-- name: DeleteTemplate :exec
DELETE FROM template
WHERE id = $1
`

func (q *Queries) DeleteTemplate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTemplate, id)
	return err
}

const getTemplate = `-- name: GetTemplate :one
SELECT id, name FROM template
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTemplate(ctx context.Context, id int64) (Template, error) {
	row := q.db.QueryRowContext(ctx, getTemplate, id)
	var i Template
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listTemplate = `-- name: ListTemplate :many
SELECT id, name FROM template
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTemplateParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTemplate(ctx context.Context, arg ListTemplateParams) ([]Template, error) {
	rows, err := q.db.QueryContext(ctx, listTemplate, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Template
	for rows.Next() {
		var i Template
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTemplate = `-- name: UpdateTemplate :one
UPDATE template
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateTemplateParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) (Template, error) {
	row := q.db.QueryRowContext(ctx, updateTemplate, arg.ID, arg.Name)
	var i Template
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
