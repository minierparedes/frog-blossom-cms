// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: websites.sql

package frog_blossom_db

import (
	"context"
)

const createWebsite = `-- name: CreateWebsite :one
INSERT INTO website (
  name,
  domain,
  owner_id,
  selected_template
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, domain, owner_id, selected_template
`

type CreateWebsiteParams struct {
	Name             string `json:"name"`
	Domain           string `json:"domain"`
	OwnerID          int64  `json:"owner_id"`
	SelectedTemplate int64  `json:"selected_template"`
}

func (q *Queries) CreateWebsite(ctx context.Context, arg CreateWebsiteParams) (Website, error) {
	row := q.db.QueryRowContext(ctx, createWebsite,
		arg.Name,
		arg.Domain,
		arg.OwnerID,
		arg.SelectedTemplate,
	)
	var i Website
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.OwnerID,
		&i.SelectedTemplate,
	)
	return i, err
}

const deleteWebsite = `-- name: DeleteWebsite :exec
DELETE FROM website
WHERE id = $1
`

func (q *Queries) DeleteWebsite(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWebsite, id)
	return err
}

const getWebsite = `-- name: GetWebsite :one
SELECT id, name, domain, owner_id, selected_template FROM website
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWebsite(ctx context.Context, id int64) (Website, error) {
	row := q.db.QueryRowContext(ctx, getWebsite, id)
	var i Website
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.OwnerID,
		&i.SelectedTemplate,
	)
	return i, err
}

const listWebsite = `-- name: ListWebsite :many
SELECT id, name, domain, owner_id, selected_template FROM website
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListWebsiteParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWebsite(ctx context.Context, arg ListWebsiteParams) ([]Website, error) {
	rows, err := q.db.QueryContext(ctx, listWebsite, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Website
	for rows.Next() {
		var i Website
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Domain,
			&i.OwnerID,
			&i.SelectedTemplate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWebsite = `-- name: UpdateWebsite :one
UPDATE website
  SET name = $2,
      domain = $3,
      owner_id = $4,
      selected_template = $5
WHERE id = $1
RETURNING id, name, domain, owner_id, selected_template
`

type UpdateWebsiteParams struct {
	ID               int64  `json:"id"`
	Name             string `json:"name"`
	Domain           string `json:"domain"`
	OwnerID          int64  `json:"owner_id"`
	SelectedTemplate int64  `json:"selected_template"`
}

func (q *Queries) UpdateWebsite(ctx context.Context, arg UpdateWebsiteParams) (Website, error) {
	row := q.db.QueryRowContext(ctx, updateWebsite,
		arg.ID,
		arg.Name,
		arg.Domain,
		arg.OwnerID,
		arg.SelectedTemplate,
	)
	var i Website
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.OwnerID,
		&i.SelectedTemplate,
	)
	return i, err
}
