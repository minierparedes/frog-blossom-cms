// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: websites.sql

package frog_blossom_db

import (
	"context"
	"database/sql"
)

const createWebsites = `-- name: CreateWebsites :one
INSERT INTO websites (
  name,
  domain,
  owner_id,
  password,
  template_id,
  builder_enabled
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, name, domain, owner_id, password, template_id, builder_enabled
`

type CreateWebsitesParams struct {
	Name           string         `json:"name"`
	Domain         string         `json:"domain"`
	OwnerID        int64          `json:"owner_id"`
	Password       sql.NullString `json:"password"`
	TemplateID     sql.NullInt64  `json:"template_id"`
	BuilderEnabled sql.NullBool   `json:"builder_enabled"`
}

func (q *Queries) CreateWebsites(ctx context.Context, arg CreateWebsitesParams) (Website, error) {
	row := q.db.QueryRowContext(ctx, createWebsites,
		arg.Name,
		arg.Domain,
		arg.OwnerID,
		arg.Password,
		arg.TemplateID,
		arg.BuilderEnabled,
	)
	var i Website
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.OwnerID,
		&i.Password,
		&i.TemplateID,
		&i.BuilderEnabled,
	)
	return i, err
}

const deleteWebsites = `-- name: DeleteWebsites :exec
DELETE FROM websites
WHERE id = $1
`

func (q *Queries) DeleteWebsites(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWebsites, id)
	return err
}

const getWebsites = `-- name: GetWebsites :one
SELECT id, name, domain, owner_id, password, template_id, builder_enabled FROM websites
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWebsites(ctx context.Context, id int64) (Website, error) {
	row := q.db.QueryRowContext(ctx, getWebsites, id)
	var i Website
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.OwnerID,
		&i.Password,
		&i.TemplateID,
		&i.BuilderEnabled,
	)
	return i, err
}

const listWebsites = `-- name: ListWebsites :many
SELECT id, name, domain, owner_id, password, template_id, builder_enabled FROM websites
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListWebsitesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWebsites(ctx context.Context, arg ListWebsitesParams) ([]Website, error) {
	rows, err := q.db.QueryContext(ctx, listWebsites, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Website
	for rows.Next() {
		var i Website
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Domain,
			&i.OwnerID,
			&i.Password,
			&i.TemplateID,
			&i.BuilderEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWebsites = `-- name: UpdateWebsites :one
UPDATE websites
  SET domain = $2,
  password = $3,
  builder_enabled = $4
WHERE id = $1
RETURNING id, name, domain, owner_id, password, template_id, builder_enabled
`

type UpdateWebsitesParams struct {
	ID             int64          `json:"id"`
	Domain         string         `json:"domain"`
	Password       sql.NullString `json:"password"`
	BuilderEnabled sql.NullBool   `json:"builder_enabled"`
}

func (q *Queries) UpdateWebsites(ctx context.Context, arg UpdateWebsitesParams) (Website, error) {
	row := q.db.QueryRowContext(ctx, updateWebsites,
		arg.ID,
		arg.Domain,
		arg.Password,
		arg.BuilderEnabled,
	)
	var i Website
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Domain,
		&i.OwnerID,
		&i.Password,
		&i.TemplateID,
		&i.BuilderEnabled,
	)
	return i, err
}
