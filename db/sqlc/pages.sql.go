// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: pages.sql

package frog_blossom_db

import (
	"context"
)

const createPages = `-- name: CreatePages :one
INSERT INTO pages (
  domain,
  page_author,
  title,
  url,
  menu_order,
  component_type,
  component_value,
  page_identifier,
  option_id,
  option_name,
  option_value,
  option_required
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, domain, page_author, title, url, menu_order, component_type, component_value, page_identifier, option_id, option_name, option_value, option_required
`

type CreatePagesParams struct {
	Domain         string `json:"domain"`
	PageAuthor     int64  `json:"page_author"`
	Title          string `json:"title"`
	Url            string `json:"url"`
	MenuOrder      int64  `json:"menu_order"`
	ComponentType  string `json:"component_type"`
	ComponentValue string `json:"component_value"`
	PageIdentifier string `json:"page_identifier"`
	OptionID       int64  `json:"option_id"`
	OptionName     string `json:"option_name"`
	OptionValue    string `json:"option_value"`
	OptionRequired bool   `json:"option_required"`
}

func (q *Queries) CreatePages(ctx context.Context, arg CreatePagesParams) (Page, error) {
	row := q.db.QueryRowContext(ctx, createPages,
		arg.Domain,
		arg.PageAuthor,
		arg.Title,
		arg.Url,
		arg.MenuOrder,
		arg.ComponentType,
		arg.ComponentValue,
		arg.PageIdentifier,
		arg.OptionID,
		arg.OptionName,
		arg.OptionValue,
		arg.OptionRequired,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.PageAuthor,
		&i.Title,
		&i.Url,
		&i.MenuOrder,
		&i.ComponentType,
		&i.ComponentValue,
		&i.PageIdentifier,
		&i.OptionID,
		&i.OptionName,
		&i.OptionValue,
		&i.OptionRequired,
	)
	return i, err
}

const deletePages = `-- name: DeletePages :exec
DELETE FROM pages
WHERE id = $1
`

func (q *Queries) DeletePages(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePages, id)
	return err
}

const getPages = `-- name: GetPages :one
SELECT id, domain, page_author, title, url, menu_order, component_type, component_value, page_identifier, option_id, option_name, option_value, option_required FROM pages
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPages(ctx context.Context, id int64) (Page, error) {
	row := q.db.QueryRowContext(ctx, getPages, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.PageAuthor,
		&i.Title,
		&i.Url,
		&i.MenuOrder,
		&i.ComponentType,
		&i.ComponentValue,
		&i.PageIdentifier,
		&i.OptionID,
		&i.OptionName,
		&i.OptionValue,
		&i.OptionRequired,
	)
	return i, err
}

const listPages = `-- name: ListPages :many
SELECT id, domain, page_author, title, url, menu_order, component_type, component_value, page_identifier, option_id, option_name, option_value, option_required FROM pages
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPagesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPages(ctx context.Context, arg ListPagesParams) ([]Page, error) {
	rows, err := q.db.QueryContext(ctx, listPages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.PageAuthor,
			&i.Title,
			&i.Url,
			&i.MenuOrder,
			&i.ComponentType,
			&i.ComponentValue,
			&i.PageIdentifier,
			&i.OptionID,
			&i.OptionName,
			&i.OptionValue,
			&i.OptionRequired,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePages = `-- name: UpdatePages :one
UPDATE pages
  SET domain = $2,
  page_author = $3,
  title = $4,
  url = $5,
  menu_order = $6,
  component_type = $7,
  component_value = $8,
  page_identifier = $9,
  option_id = $10,
  option_name = $11,
  option_value = $12,
  option_required = $13
WHERE id = $1
RETURNING id, domain, page_author, title, url, menu_order, component_type, component_value, page_identifier, option_id, option_name, option_value, option_required
`

type UpdatePagesParams struct {
	ID             int64  `json:"id"`
	Domain         string `json:"domain"`
	PageAuthor     int64  `json:"page_author"`
	Title          string `json:"title"`
	Url            string `json:"url"`
	MenuOrder      int64  `json:"menu_order"`
	ComponentType  string `json:"component_type"`
	ComponentValue string `json:"component_value"`
	PageIdentifier string `json:"page_identifier"`
	OptionID       int64  `json:"option_id"`
	OptionName     string `json:"option_name"`
	OptionValue    string `json:"option_value"`
	OptionRequired bool   `json:"option_required"`
}

func (q *Queries) UpdatePages(ctx context.Context, arg UpdatePagesParams) (Page, error) {
	row := q.db.QueryRowContext(ctx, updatePages,
		arg.ID,
		arg.Domain,
		arg.PageAuthor,
		arg.Title,
		arg.Url,
		arg.MenuOrder,
		arg.ComponentType,
		arg.ComponentValue,
		arg.PageIdentifier,
		arg.OptionID,
		arg.OptionName,
		arg.OptionValue,
		arg.OptionRequired,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.PageAuthor,
		&i.Title,
		&i.Url,
		&i.MenuOrder,
		&i.ComponentType,
		&i.ComponentValue,
		&i.PageIdentifier,
		&i.OptionID,
		&i.OptionName,
		&i.OptionValue,
		&i.OptionRequired,
	)
	return i, err
}
