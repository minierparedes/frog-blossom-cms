// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: meta.sql

package frog_blossom_db

import (
	"context"
	"database/sql"
)

const createMeta = `-- name: CreateMeta :one
INSERT INTO meta (
  page_id,
  posts_id,
  meta_title,
  meta_description,
  meta_robots,
  meta_viewport,
  meta_charset,
  page_amount,
  site_language,
  meta_key,
  meta_value
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, page_id, posts_id, meta_title, meta_description, meta_robots, meta_viewport, meta_charset, page_amount, site_language, meta_key, meta_value
`

type CreateMetaParams struct {
	PageID          sql.NullInt64  `json:"page_id"`
	PostsID         sql.NullInt64  `json:"posts_id"`
	MetaTitle       sql.NullString `json:"meta_title"`
	MetaDescription sql.NullString `json:"meta_description"`
	MetaRobots      sql.NullString `json:"meta_robots"`
	MetaViewport    sql.NullString `json:"meta_viewport"`
	MetaCharset     sql.NullString `json:"meta_charset"`
	PageAmount      int64          `json:"page_amount"`
	SiteLanguage    sql.NullString `json:"site_language"`
	MetaKey         string         `json:"meta_key"`
	MetaValue       string         `json:"meta_value"`
}

func (q *Queries) CreateMeta(ctx context.Context, arg CreateMetaParams) (Meta, error) {
	row := q.db.QueryRowContext(ctx, createMeta,
		arg.PageID,
		arg.PostsID,
		arg.MetaTitle,
		arg.MetaDescription,
		arg.MetaRobots,
		arg.MetaViewport,
		arg.MetaCharset,
		arg.PageAmount,
		arg.SiteLanguage,
		arg.MetaKey,
		arg.MetaValue,
	)
	var i Meta
	err := row.Scan(
		&i.ID,
		&i.PageID,
		&i.PostsID,
		&i.MetaTitle,
		&i.MetaDescription,
		&i.MetaRobots,
		&i.MetaViewport,
		&i.MetaCharset,
		&i.PageAmount,
		&i.SiteLanguage,
		&i.MetaKey,
		&i.MetaValue,
	)
	return i, err
}

const deleteMeta = `-- name: DeleteMeta :exec
DELETE FROM meta
WHERE id = $1
`

func (q *Queries) DeleteMeta(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMeta, id)
	return err
}

const getMeta = `-- name: GetMeta :one
SELECT id, page_id, posts_id, meta_title, meta_description, meta_robots, meta_viewport, meta_charset, page_amount, site_language, meta_key, meta_value FROM meta
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMeta(ctx context.Context, id int64) (Meta, error) {
	row := q.db.QueryRowContext(ctx, getMeta, id)
	var i Meta
	err := row.Scan(
		&i.ID,
		&i.PageID,
		&i.PostsID,
		&i.MetaTitle,
		&i.MetaDescription,
		&i.MetaRobots,
		&i.MetaViewport,
		&i.MetaCharset,
		&i.PageAmount,
		&i.SiteLanguage,
		&i.MetaKey,
		&i.MetaValue,
	)
	return i, err
}

const listMeta = `-- name: ListMeta :many
SELECT id, page_id, posts_id, meta_title, meta_description, meta_robots, meta_viewport, meta_charset, page_amount, site_language, meta_key, meta_value FROM meta
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListMetaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMeta(ctx context.Context, arg ListMetaParams) ([]Meta, error) {
	rows, err := q.db.QueryContext(ctx, listMeta, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meta
	for rows.Next() {
		var i Meta
		if err := rows.Scan(
			&i.ID,
			&i.PageID,
			&i.PostsID,
			&i.MetaTitle,
			&i.MetaDescription,
			&i.MetaRobots,
			&i.MetaViewport,
			&i.MetaCharset,
			&i.PageAmount,
			&i.SiteLanguage,
			&i.MetaKey,
			&i.MetaValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeta = `-- name: UpdateMeta :one
UPDATE meta
  SET page_id = $2,
posts_id = $3,
meta_title = $4,
meta_description = $5,
meta_robots = $6,
meta_viewport = $7,
meta_charset = $8,
page_amount = $9,
site_language = $10,
meta_key = $11,
meta_value = $12
WHERE id = $1
RETURNING id, page_id, posts_id, meta_title, meta_description, meta_robots, meta_viewport, meta_charset, page_amount, site_language, meta_key, meta_value
`

type UpdateMetaParams struct {
	ID              int64          `json:"id"`
	PageID          sql.NullInt64  `json:"page_id"`
	PostsID         sql.NullInt64  `json:"posts_id"`
	MetaTitle       sql.NullString `json:"meta_title"`
	MetaDescription sql.NullString `json:"meta_description"`
	MetaRobots      sql.NullString `json:"meta_robots"`
	MetaViewport    sql.NullString `json:"meta_viewport"`
	MetaCharset     sql.NullString `json:"meta_charset"`
	PageAmount      int64          `json:"page_amount"`
	SiteLanguage    sql.NullString `json:"site_language"`
	MetaKey         string         `json:"meta_key"`
	MetaValue       string         `json:"meta_value"`
}

func (q *Queries) UpdateMeta(ctx context.Context, arg UpdateMetaParams) (Meta, error) {
	row := q.db.QueryRowContext(ctx, updateMeta,
		arg.ID,
		arg.PageID,
		arg.PostsID,
		arg.MetaTitle,
		arg.MetaDescription,
		arg.MetaRobots,
		arg.MetaViewport,
		arg.MetaCharset,
		arg.PageAmount,
		arg.SiteLanguage,
		arg.MetaKey,
		arg.MetaValue,
	)
	var i Meta
	err := row.Scan(
		&i.ID,
		&i.PageID,
		&i.PostsID,
		&i.MetaTitle,
		&i.MetaDescription,
		&i.MetaRobots,
		&i.MetaViewport,
		&i.MetaCharset,
		&i.PageAmount,
		&i.SiteLanguage,
		&i.MetaKey,
		&i.MetaValue,
	)
	return i, err
}
