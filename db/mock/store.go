// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reflection/frog-blossom-cms/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination db/mock/store.go github.com/reflection/frog-blossom-cms/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	frog_blossom_db "github.com/reflection/frog-blossom-cms/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateMeta mocks base method.
func (m *MockStore) CreateMeta(arg0 context.Context, arg1 frog_blossom_db.CreateMetaParams) (frog_blossom_db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeta", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeta indicates an expected call of CreateMeta.
func (mr *MockStoreMockRecorder) CreateMeta(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeta", reflect.TypeOf((*MockStore)(nil).CreateMeta), arg0, arg1)
}

// CreatePageTx mocks base method.
func (m *MockStore) CreatePageTx(arg0 context.Context, arg1 frog_blossom_db.CreatePageTxParams) (frog_blossom_db.CreatePageTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePageTx", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.CreatePageTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePageTx indicates an expected call of CreatePageTx.
func (mr *MockStoreMockRecorder) CreatePageTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePageTx", reflect.TypeOf((*MockStore)(nil).CreatePageTx), arg0, arg1)
}

// CreatePages mocks base method.
func (m *MockStore) CreatePages(arg0 context.Context, arg1 frog_blossom_db.CreatePagesParams) (frog_blossom_db.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePages", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePages indicates an expected call of CreatePages.
func (mr *MockStoreMockRecorder) CreatePages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePages", reflect.TypeOf((*MockStore)(nil).CreatePages), arg0, arg1)
}

// CreatePosts mocks base method.
func (m *MockStore) CreatePosts(arg0 context.Context, arg1 frog_blossom_db.CreatePostsParams) (frog_blossom_db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePosts", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePosts indicates an expected call of CreatePosts.
func (mr *MockStoreMockRecorder) CreatePosts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePosts", reflect.TypeOf((*MockStore)(nil).CreatePosts), arg0, arg1)
}

// CreatePostsTx mocks base method.
func (m *MockStore) CreatePostsTx(arg0 context.Context, arg1 frog_blossom_db.CreatePostTxParams) (frog_blossom_db.CreatePostTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostsTx", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.CreatePostTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePostsTx indicates an expected call of CreatePostsTx.
func (mr *MockStoreMockRecorder) CreatePostsTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostsTx", reflect.TypeOf((*MockStore)(nil).CreatePostsTx), arg0, arg1)
}

// CreateUsers mocks base method.
func (m *MockStore) CreateUsers(arg0 context.Context, arg1 frog_blossom_db.CreateUsersParams) (frog_blossom_db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsers", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsers indicates an expected call of CreateUsers.
func (mr *MockStoreMockRecorder) CreateUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsers", reflect.TypeOf((*MockStore)(nil).CreateUsers), arg0, arg1)
}

// DeleteMeta mocks base method.
func (m *MockStore) DeleteMeta(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeta indicates an expected call of DeleteMeta.
func (mr *MockStoreMockRecorder) DeleteMeta(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeta", reflect.TypeOf((*MockStore)(nil).DeleteMeta), arg0, arg1)
}

// DeleteMetaByPageId mocks base method.
func (m *MockStore) DeleteMetaByPageId(arg0 context.Context, arg1 sql.NullInt64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetaByPageId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMetaByPageId indicates an expected call of DeleteMetaByPageId.
func (mr *MockStoreMockRecorder) DeleteMetaByPageId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetaByPageId", reflect.TypeOf((*MockStore)(nil).DeleteMetaByPageId), arg0, arg1)
}

// DeleteMetaByPostId mocks base method.
func (m *MockStore) DeleteMetaByPostId(arg0 context.Context, arg1 sql.NullInt64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetaByPostId", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMetaByPostId indicates an expected call of DeleteMetaByPostId.
func (mr *MockStoreMockRecorder) DeleteMetaByPostId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetaByPostId", reflect.TypeOf((*MockStore)(nil).DeleteMetaByPostId), arg0, arg1)
}

// DeletePageTx mocks base method.
func (m *MockStore) DeletePageTx(arg0 context.Context, arg1 frog_blossom_db.DeletePageTxParams) (frog_blossom_db.DeletePageTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePageTx", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.DeletePageTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePageTx indicates an expected call of DeletePageTx.
func (mr *MockStoreMockRecorder) DeletePageTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePageTx", reflect.TypeOf((*MockStore)(nil).DeletePageTx), arg0, arg1)
}

// DeletePages mocks base method.
func (m *MockStore) DeletePages(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePages indicates an expected call of DeletePages.
func (mr *MockStoreMockRecorder) DeletePages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePages", reflect.TypeOf((*MockStore)(nil).DeletePages), arg0, arg1)
}

// DeletePosts mocks base method.
func (m *MockStore) DeletePosts(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePosts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePosts indicates an expected call of DeletePosts.
func (mr *MockStoreMockRecorder) DeletePosts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePosts", reflect.TypeOf((*MockStore)(nil).DeletePosts), arg0, arg1)
}

// DeletePostsTx mocks base method.
func (m *MockStore) DeletePostsTx(arg0 context.Context, arg1 frog_blossom_db.DeletePostTxParams) (frog_blossom_db.DeletePostTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostsTx", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.DeletePostTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePostsTx indicates an expected call of DeletePostsTx.
func (mr *MockStoreMockRecorder) DeletePostsTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostsTx", reflect.TypeOf((*MockStore)(nil).DeletePostsTx), arg0, arg1)
}

// DeleteUsers mocks base method.
func (m *MockStore) DeleteUsers(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsers indicates an expected call of DeleteUsers.
func (mr *MockStoreMockRecorder) DeleteUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsers", reflect.TypeOf((*MockStore)(nil).DeleteUsers), arg0, arg1)
}

// GetMeta mocks base method.
func (m *MockStore) GetMeta(arg0 context.Context, arg1 int64) (frog_blossom_db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockStoreMockRecorder) GetMeta(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockStore)(nil).GetMeta), arg0, arg1)
}

// GetMetaByPageIDForUpdate mocks base method.
func (m *MockStore) GetMetaByPageIDForUpdate(arg0 context.Context, arg1 sql.NullInt64) (frog_blossom_db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaByPageIDForUpdate", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaByPageIDForUpdate indicates an expected call of GetMetaByPageIDForUpdate.
func (mr *MockStoreMockRecorder) GetMetaByPageIDForUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaByPageIDForUpdate", reflect.TypeOf((*MockStore)(nil).GetMetaByPageIDForUpdate), arg0, arg1)
}

// GetMetaByPostsIDForUpdate mocks base method.
func (m *MockStore) GetMetaByPostsIDForUpdate(arg0 context.Context, arg1 sql.NullInt64) (frog_blossom_db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaByPostsIDForUpdate", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaByPostsIDForUpdate indicates an expected call of GetMetaByPostsIDForUpdate.
func (mr *MockStoreMockRecorder) GetMetaByPostsIDForUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaByPostsIDForUpdate", reflect.TypeOf((*MockStore)(nil).GetMetaByPostsIDForUpdate), arg0, arg1)
}

// GetPages mocks base method.
func (m *MockStore) GetPages(arg0 context.Context, arg1 int64) (frog_blossom_db.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPages", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPages indicates an expected call of GetPages.
func (mr *MockStoreMockRecorder) GetPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPages", reflect.TypeOf((*MockStore)(nil).GetPages), arg0, arg1)
}

// GetPosts mocks base method.
func (m *MockStore) GetPosts(arg0 context.Context, arg1 int64) (frog_blossom_db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockStoreMockRecorder) GetPosts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockStore)(nil).GetPosts), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockStore) GetUsers(arg0 context.Context, arg1 int64) (frog_blossom_db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStoreMockRecorder) GetUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStore)(nil).GetUsers), arg0, arg1)
}

// InitSetupConfigTx mocks base method.
func (m *MockStore) InitSetupConfigTx(arg0 context.Context, arg1 frog_blossom_db.InitSetupConfigTxParams) (frog_blossom_db.InitSetupConfigTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitSetupConfigTx", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.InitSetupConfigTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitSetupConfigTx indicates an expected call of InitSetupConfigTx.
func (mr *MockStoreMockRecorder) InitSetupConfigTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSetupConfigTx", reflect.TypeOf((*MockStore)(nil).InitSetupConfigTx), arg0, arg1)
}

// ListMeta mocks base method.
func (m *MockStore) ListMeta(arg0 context.Context, arg1 frog_blossom_db.ListMetaParams) ([]frog_blossom_db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMeta", arg0, arg1)
	ret0, _ := ret[0].([]frog_blossom_db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMeta indicates an expected call of ListMeta.
func (mr *MockStoreMockRecorder) ListMeta(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMeta", reflect.TypeOf((*MockStore)(nil).ListMeta), arg0, arg1)
}

// ListPages mocks base method.
func (m *MockStore) ListPages(arg0 context.Context, arg1 frog_blossom_db.ListPagesParams) ([]frog_blossom_db.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPages", arg0, arg1)
	ret0, _ := ret[0].([]frog_blossom_db.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPages indicates an expected call of ListPages.
func (mr *MockStoreMockRecorder) ListPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPages", reflect.TypeOf((*MockStore)(nil).ListPages), arg0, arg1)
}

// ListPosts mocks base method.
func (m *MockStore) ListPosts(arg0 context.Context, arg1 frog_blossom_db.ListPostsParams) ([]frog_blossom_db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPosts", arg0, arg1)
	ret0, _ := ret[0].([]frog_blossom_db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPosts indicates an expected call of ListPosts.
func (mr *MockStoreMockRecorder) ListPosts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPosts", reflect.TypeOf((*MockStore)(nil).ListPosts), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 frog_blossom_db.ListUsersParams) ([]frog_blossom_db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]frog_blossom_db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// UpdateMeta mocks base method.
func (m *MockStore) UpdateMeta(arg0 context.Context, arg1 frog_blossom_db.UpdateMetaParams) (frog_blossom_db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeta", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeta indicates an expected call of UpdateMeta.
func (mr *MockStoreMockRecorder) UpdateMeta(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeta", reflect.TypeOf((*MockStore)(nil).UpdateMeta), arg0, arg1)
}

// UpdatePageTx mocks base method.
func (m *MockStore) UpdatePageTx(arg0 context.Context, arg1 frog_blossom_db.UpdatePageTxParams) (frog_blossom_db.UpdatePageTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePageTx", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.UpdatePageTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePageTx indicates an expected call of UpdatePageTx.
func (mr *MockStoreMockRecorder) UpdatePageTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePageTx", reflect.TypeOf((*MockStore)(nil).UpdatePageTx), arg0, arg1)
}

// UpdatePages mocks base method.
func (m *MockStore) UpdatePages(arg0 context.Context, arg1 frog_blossom_db.UpdatePagesParams) (frog_blossom_db.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePages", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePages indicates an expected call of UpdatePages.
func (mr *MockStoreMockRecorder) UpdatePages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePages", reflect.TypeOf((*MockStore)(nil).UpdatePages), arg0, arg1)
}

// UpdatePosts mocks base method.
func (m *MockStore) UpdatePosts(arg0 context.Context, arg1 frog_blossom_db.UpdatePostsParams) (frog_blossom_db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePosts", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePosts indicates an expected call of UpdatePosts.
func (mr *MockStoreMockRecorder) UpdatePosts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePosts", reflect.TypeOf((*MockStore)(nil).UpdatePosts), arg0, arg1)
}

// UpdatePostsTx mocks base method.
func (m *MockStore) UpdatePostsTx(arg0 context.Context, arg1 frog_blossom_db.UpdatePostTxParams) (frog_blossom_db.UpdatePostTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostsTx", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.UpdatePostTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePostsTx indicates an expected call of UpdatePostsTx.
func (mr *MockStoreMockRecorder) UpdatePostsTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostsTx", reflect.TypeOf((*MockStore)(nil).UpdatePostsTx), arg0, arg1)
}

// UpdateUsers mocks base method.
func (m *MockStore) UpdateUsers(arg0 context.Context, arg1 frog_blossom_db.UpdateUsersParams) (frog_blossom_db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsers", arg0, arg1)
	ret0, _ := ret[0].(frog_blossom_db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsers indicates an expected call of UpdateUsers.
func (mr *MockStoreMockRecorder) UpdateUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsers", reflect.TypeOf((*MockStore)(nil).UpdateUsers), arg0, arg1)
}
