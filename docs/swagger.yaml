basePath: /api/v1
definitions:
  db.CreateMetaTxParams:
    properties:
      locale:
        type: string
      meta_description:
        type: string
      meta_key:
        type: string
      meta_og_image:
        type: string
      meta_robots:
        type: string
      meta_title:
        type: string
      meta_value:
        type: string
      page_amount:
        type: integer
      posts_id:
        type: integer
      site_language:
        type: string
    type: object
  db.CreatePagesParams:
    properties:
      author_id:
        type: integer
      component_type:
        type: string
      component_value:
        type: string
      domain:
        type: string
      menu_order:
        type: integer
      option_id:
        type: integer
      option_name:
        type: string
      option_required:
        type: boolean
      option_value:
        type: string
      page_author:
        type: string
      page_identifier:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  db.CreatePostsParams:
    properties:
      author_id:
        type: integer
      content:
        type: string
      edited_at:
        type: string
      post_author:
        type: string
      post_mime_type:
        type: string
      published_at:
        type: string
      published_by:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  db.Page:
    properties:
      author_id:
        type: integer
      component_type:
        type: string
      component_value:
        type: string
      domain:
        type: string
      id:
        type: integer
      menu_order:
        type: integer
      option_id:
        type: integer
      option_name:
        type: string
      option_required:
        type: boolean
      option_value:
        type: string
      page_author:
        type: string
      page_identifier:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  db.Post:
    properties:
      author_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      edited_at:
        type: string
      id:
        type: integer
      post_author:
        type: string
      post_mime_type:
        type: string
      published_at:
        type: string
      published_by:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  db.UpdateMetaTxParams:
    properties:
      id:
        type: integer
      locale:
        type: string
      meta_description:
        type: string
      meta_key:
        type: string
      meta_og_image:
        type: string
      meta_robots:
        type: string
      meta_title:
        type: string
      meta_value:
        type: string
      page_amount:
        type: integer
      page_id:
        type: integer
      posts_id:
        type: integer
      site_language:
        type: string
    type: object
  db.UpdatePagesParams:
    properties:
      author_id:
        type: integer
      component_type:
        type: string
      component_value:
        type: string
      domain:
        type: string
      id:
        type: integer
      menu_order:
        type: integer
      option_id:
        type: integer
      option_name:
        type: string
      option_required:
        type: boolean
      option_value:
        type: string
      page_author:
        type: string
      page_identifier:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  db.UpdatePostsParams:
    properties:
      author_id:
        type: integer
      content:
        type: string
      edited_at:
        type: string
      id:
        type: integer
      post_author:
        type: string
      post_mime_type:
        type: string
      published_at:
        type: string
      published_by:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      url:
        type: string
    type: object
  db.User:
    properties:
      created_at:
        type: string
      description:
        $ref: '#/definitions/sql.NullString'
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_deleted:
        $ref: '#/definitions/sql.NullBool'
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
      updated_at:
        type: string
      user_url:
        $ref: '#/definitions/sql.NullString'
      username:
        type: string
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  handler.createPageTxRequest:
    description: Request parameters for creating a page transactional
    properties:
      meta:
        $ref: '#/definitions/db.CreateMetaTxParams'
      pages:
        $ref: '#/definitions/db.CreatePagesParams'
      user_id:
        type: integer
      username:
        type: string
    required:
    - pages
    - user_id
    - username
    type: object
  handler.createPostsTxRequest:
    description: Request parameters for creating a post
    properties:
      meta:
        $ref: '#/definitions/db.CreateMetaTxParams'
      posts:
        $ref: '#/definitions/db.CreatePostsParams'
      user_id:
        type: integer
      username:
        type: string
    required:
    - posts
    - user_id
    - username
    type: object
  handler.createUsersRequest:
    description: Request parameters for creating a user
    properties:
      description:
        $ref: '#/definitions/sql.NullString'
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
      user_url:
        $ref: '#/definitions/sql.NullString'
      username:
        type: string
    required:
    - description
    - email
    - first_name
    - last_name
    - password
    - role
    - user_url
    - username
    type: object
  handler.updatePagesTxRequest:
    description: Request parameters for updating pages transactional
    properties:
      meta:
        $ref: '#/definitions/db.UpdateMetaTxParams'
      pages:
        $ref: '#/definitions/db.UpdatePagesParams'
      post_id:
        type: integer
      posts:
        $ref: '#/definitions/db.UpdatePostsParams'
      user_id:
        type: integer
      username:
        type: string
    required:
    - pages
    - user_id
    - username
    type: object
  handler.updatePostsTxRequest:
    description: Request parameters for updating a post
    properties:
      meta:
        $ref: '#/definitions/db.UpdateMetaTxParams'
      posts:
        $ref: '#/definitions/db.UpdatePostsParams'
      user_id:
        type: integer
      username:
        type: string
    required:
    - user_id
    - username
    type: object
  handler.updateUserRequest:
    description: Request parameters for updating a user
    properties:
      description:
        $ref: '#/definitions/sql.NullString'
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
      user_url:
        $ref: '#/definitions/sql.NullString'
      username:
        type: string
    type: object
  sql.NullBool:
    properties:
      bool:
        type: boolean
      valid:
        description: Valid is true if Bool is not NULL
        type: boolean
    type: object
  sql.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: frog-blossom
  title: frog blossom API documentation
  version: "1"
paths:
  /pages:
    get:
      consumes:
      - application/json
      description: List pages with pagination
      parameters:
      - description: Page ID
        in: query
        name: page_id
        required: true
        type: integer
      - description: Page Size (minimum 5, maximum 10)
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Page'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List pages
      tags:
      - pages
    post:
      consumes:
      - application/json
      description: Create a page and its associated metadata transactional
      parameters:
      - description: Create Page Request
        in: body
        name: createPageTxRequest
        required: true
        schema:
          $ref: '#/definitions/handler.createPageTxRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Page'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a page transactional
      tags:
      - pages
  /pages/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a page and its associated metadata
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a page
      tags:
      - pages
    get:
      consumes:
      - application/json
      description: GetPageHandler retrieves a page by ID
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Page'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a page by ID
      tags:
      - pages
    put:
      consumes:
      - application/json
      description: Update a page and its associated metadata and posts transactional
      parameters:
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Pages Request
        in: body
        name: updatePagesTxRequest
        required: true
        schema:
          $ref: '#/definitions/handler.updatePagesTxRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.Page'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a page transactional
      tags:
      - pages
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieve a list of posts with pagination support
      parameters:
      - description: Page number
        in: query
        name: page_id
        required: true
        type: integer
      - description: Page size (minimum 5, maximum 10)
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.Post'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List posts with pagination
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Post creation request
        in: body
        name: createPostsTxRequest
        required: true
        schema:
          $ref: '#/definitions/handler.createPostsTxRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post with the specified ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieve a specific post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update a post with specified parameters
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: body
        name: user_id
        required: true
        schema:
          type: integer
      - description: Username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Updated Posts request
        in: body
        name: updatePostsTxRequest
        required: true
        schema:
          $ref: '#/definitions/handler.updatePostsTxRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a post
      tags:
      - posts
  /users:
    get:
      consumes:
      - application/json
      description: List users with pagination
      parameters:
      - description: Page ID
        in: query
        name: page_id
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided parameters
      parameters:
      - description: Create User Request
        in: body
        name: createUsersRequest
        required: true
        schema:
          $ref: '#/definitions/handler.createUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a user
      tags:
      - users
  /users/{id}/soft_delete:
    delete:
      consumes:
      - application/json
      description: Soft delete a user by setting the IsDeleted flag to true
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Soft delete a user
      tags:
      - users
swagger: "2.0"
